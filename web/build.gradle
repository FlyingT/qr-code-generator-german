plugins {
  id "idea"
  id "org.springframework.boot" version "2.3.0.RELEASE"
  id "io.spring.dependency-management" version "1.0.9.RELEASE"
  id "org.jetbrains.kotlin.jvm" version "1.3.72"
  id "org.jetbrains.kotlin.plugin.spring" version "1.3.72"
  id "org.jetbrains.kotlin.kapt" version "1.3.72"
  id "com.google.protobuf" version "0.8.12"
}

group = "com.piotrjanczyk.qrcodegenerator.web"
version = "1.0.0"
java.sourceCompatibility = JavaVersion.VERSION_11

repositories {
  mavenCentral()
}

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
  implementation "org.springframework.boot:spring-boot-starter-webflux"
  implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
  implementation "io.projectreactor.kotlin:reactor-kotlin-extensions"
  implementation "org.jetbrains.kotlin:kotlin-reflect"
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactor"

  implementation "com.google.protobuf:protobuf-gradle-plugin:0.8.11"
  implementation "com.google.protobuf:protobuf-java:3.11.1"
  implementation "com.google.protobuf:protobuf-java-util:3.11.1"
  implementation "io.grpc:grpc-netty-shaded:1.26.0"
  implementation "io.grpc:grpc-protobuf:1.26.0"
  implementation "io.grpc:grpc-stub:1.26.0"
  implementation "io.grpc:grpc-kotlin-stub:0.1.1"

  kapt "org.springframework.boot:spring-boot-configuration-processor"

  testImplementation("org.springframework.boot:spring-boot-starter-test") {
    exclude group: "org.junit.vintage", module: "junit-vintage-engine"
  }
  testImplementation "io.projectreactor:reactor-test"
}

test {
  useJUnitPlatform()
}

compileKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "1.8"
  }
}

protobuf {
  protoc { artifact = "com.google.protobuf:protoc:3.6.1" }
  plugins {
    grpc { artifact = "io.grpc:protoc-gen-grpc-java:1.27.0" }
    grpckt { artifact = "io.grpc:protoc-gen-grpc-kotlin:0.1.1" }
  }
  generateProtoTasks {
    all().each { task ->
      task.plugins {
        grpc {}
        grpckt {}
      }
    }
  }
}

idea {
  module {
    def kaptMain = file("${project.buildDir}/generated/source/kapt/main")
    sourceDirs += kaptMain
    generatedSourceDirs += kaptMain

    outputDir file("${project.buildDir}/classes/main")
    testOutputDir file("${project.buildDir}/classes/test")
  }
}
